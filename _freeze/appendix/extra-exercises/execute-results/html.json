{
  "hash": "26d0c935bdca33b4c417c2503fc0c612",
  "result": {
    "markdown": "# Extra exercises\n\n## Creating automatic analysis pipelines\n\n### Exercise: Update function to also calculate median and IQR\n\n> Time: \\~8 minutes.\n\nLet's make a change to our function and test out how the\n`tar_outdated()` and `tar_visnetwork()` work.\n\n1.  Open up the `R/functions.R` file.\n2.  Add median and interquartile range (IQR) to the `summarise()`\n    function, by adding it to the end of `list(mean = mean, sd = sd)`,\n    after the second `sd`. Note, IQR should look like `iqr = IQR` since\n    we want the output columns to have a lowercase for the column names.\n3.  Run `tar_outdated()` and `tar_visnetwork()` in the Console (or by\n    using the Command Palette {{< var keybind.palette >}}, then \"targets\n    outdated\" or \"targets visual\"). What does it show?\n4.  Style using {{< var keybind.styler >}}. You might need to force a\n    reformat if the code is too long by highlighting the line and using\n    {{< var keybind.palette >}}, then \"reformat\".\n5.  Run `tar_make()` in the Console or with\n    {{< var keybind.targets_make >}}. Re-check for outdated targets and\n    visualize the network again.\n6.  Open up the Git interface and commit the changes to the Git history\n    with {{< var keybind.git >}}.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for a potential solution**. Only click if you are struggling or are out of time.\"}\n#' Calculate descriptive statistics of each metabolite.\n#'\n#' @param data Lipidomics dataset.\n#'\n#' @return A data.frame/tibble.\n#'\ndescriptive_stats <- function(data) {\n  data %>%\n    dplyr::group_by(metabolite) %>%\n    dplyr::summarise(dplyr::across(value, list(\n      mean = mean,\n      sd = sd,\n      median = median,\n      iqr = IQR\n    ))) %>%\n    dplyr::mutate(dplyr::across(tidyselect::where(is.numeric), ~round(.x, digits = 1)))\n}\n```\n:::\n\n\n## A general approach to doing statistical analyses\n\n### Exercise: How would you define a linear regression with parsnip?\n\n> Time: \\~10 minutes.\n\nUsing [parsnip's \"Examples\"\nvignette](https://parsnip.tidymodels.org/articles/Examples.html) as well\nas the code we wrote for the logistic regression above as a template,\nwrite `{parsnip}` code that would define a simple (an engine of`\"lm\"`)\nlinear regression model. Begin by making a new Markdown header and code\nchunk at the bottom of the `doc/learning.qmd` file, like listed below:\n\n````         \n## Exercises\n### Linear regression model definition\n\n```{{r}}\n\n```\n````\n\nAfter writing the code, style the file using {{< var keybind.styler >}}.\nWe will eventually delete these exercise text in the Quarto file, but\nfor now, commit the changes to the Git history with\n{{< var keybind.git >}}.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"**Click for the solution**. Only click if you are struggling or are out of time.\"}\nlinear_reg_specs <- linear_reg() %>%\n  set_engine(\"lm\")\n```\n:::\n\n\n## Building a website with Quarto\n\n### Exercise: Look through the new website folder\n\n> Time: \\~5 minutes.\n\nIn your main project folder, there should now be a folder called\n`_site/`. Look through the folder. What files are now created? Open up\nthe `index.html` file in your browser while in RStudio by clicking the\n`index.html` file and then selecting the \"Open in web browser\".\n\n<!-- TODO: Confirm the name of the website folder. -->\n\nRecall how we described what a website is. Can you see how these files\nand folders are simply HTML files that the browser shows as website? In\nthe browser URL, change the `index.html` ending link to\n`doc/report.html`. See how it changes to the file based on how it is\nstructured in the folder?\n\n### Exercise: Make figures prettier\n\n> Time: \\~25 minutes\n\nLooking through the [Cell\nReference](https://quarto.org/docs/reference/cells/cells-knitr.html)\ndocumentation, complete these tasks.\n\n-   Add a `fig-cap` option to each of the figures.\n\n-   For the distribution plot, set the code chunk option `column` to\n    `page` to make it bigger.\n\nLook through the `{ggplot2}` documentation on `theme_set()` and\n`theme()` to update the look of all your figures. In the `setup` code\nchunk of the `doc/learning.qmd` file, make a new theme object and use\n`theme_set()` to apply that theme to all plots. Use this as a scaffold:\n\n```{{r setup}}\n# ... previous code\nupdated_theme <- theme(\n  # ... make changes\n)\n\n# Or start with a template like theme_classic()\n\nupdated_theme <- theme_TEMPLATE() +\n  theme(\n    # ...\n  )\n\ntheme_set(updated_theme)\n```\n",
    "supporting": [
      "extra-exercises_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}