# Smoother project-based collaboration {#smoother-collaboration}

{{< include includes/_wip.qmd >}}

More automated processes for collaborating around a project.

## Learning objectives

The overall objective for this session is to:

1.  Identify potential actions to streamline collaboration on a data
    analysis project and create projects that apply many of these
    actions using R.

More specific objectives are to:

1.  Explain what project-level R dependency management is, what a
    "project environment" is, and why these concepts are important to
    consider in collaborative and reproducible analyses.
2.  Describe the difference between "workflow dependencies" and "build
    dependencies",
3.  Apply functions in the `{renv}` and `{usethis}` R packages to
    implement these dependency management concepts.
4.  Explain the role that following a style guide has on building a
    common approach to reading (and writing) R code, and thus improve
    project-level collaboration.
5.  Use `{styler}`, `{lintr}`, and RStudio's canonical markdown mode to
    programmatically check and apply style guides to your project files.

## Formal R dependency management

```{r, eval=FALSE}
# If using linux, use rspm::renv_init()
renv::init()
renv::status()
renv::snapshot()
use_package("", "Suggests")
use_package("", "Imports")
renv::restore()
```

-   start with having the raw data script sourced.

    -   Pretend it is a complex project, where this data is just the
        start, more will be coming in. And you need to work with a few
        others on the project, because it requires different expertises
        involved.

    -   Aim to make it easier for others to join project and follow a
        common standard.

-   Folders and files added:

    -   .Rprofile
    -   renv

-   set up environment

    -   Open `.Rprofile` and add:

    ``` r
    options(
        renv.settings.snapshot.type = "explicit",
        renv.config.auto.snapshot = TRUE
    )
    ```

-   required vs helper packages (imports vs suggests)

    -   e.g. tidyverse in Depends?

-   If it gets annoying, can always do: `renv::deactivate()`

## Exercise:

1.  

## Programmatically follow a style guide

```{r}
styler::style_dir()
```

Ctrl-Shift-P

-   caching `cache_activate()`

```{r}
options(
  styler.addins_style_transformer = "styler::tidyverse_style(indent_by = 4)"
)
```

## Exercise: copy and paste code that is wrong.

Run lintr and see errors. Run styler to fix some of them up.

-   include something like `{{}}`
-   create a function in R to do it more efficiently (for styler)

## Automatic linting checks

Can add GitHub Actions with lintr?

use_github_action("lint-project")

could even use

use_github_action("style")

this might be an extra.

## Standard markdown format

Briefly talk about the visual mode.

-   Quarto visual/canonical mode.

## Exercise:

## Summary

## Extras? (quick read)
