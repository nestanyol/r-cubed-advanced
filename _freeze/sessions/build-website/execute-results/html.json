{
  "hash": "e0affc072589f52b69441ca10dbf7c57",
  "result": {
    "markdown": "# Publicizing your analyses with a website {#sec-build-website}\n\n\n\n\n\nDisseminating our research and work is one of the key tasks of being a\nresearcher. We researchers are sadly very limited in our focus on\npublishing papers, when our work can encompass much more than just\npapers and when there are other forms of publishing aside from papers.\nOne of the most effective forms of disseminating content is in creating\na website, thanks to the power of Google indexing.\n\nWith current software tools and services, Making simple websites like\nblogs has historically been fairly easy. Making websites presenting\nanalytical work and outputs on the other hand, has been a difficult\narea. Over the last 10 years, many tools and packages have been created\nthat try to simplify that task. They each have had their strengths, and\ntheir major flaws. The most recent software, though, is a massive\nimprovement of previous attempts. In this session we will be covering\nhow to make websites for code-based analysis projects that builds on top\nof R Markdown / Quarto that is familiar to many R users.\n\n## Learning objectives\n\nThe overall objective for this session is to:\n\n1.  Explain what a website is, what minimum files are needed, and how to\n    use Quarto as a framework for creating them and including them as\n    part of a pipeline.\n\nMore specific objectives are to:\n\n1.  Describe how websites are essentially folders and files, where some\n    files need to be named a specific way (like the `index.html` file).\n2.  Explain how Quarto executes R code in a document and creates\n    different file formats from it, like Word or HTML. Use Quarto's YAML\n    header options, like `format: docx` or `format: html`, to create\n    different file outputs.\n3.  Use the `_quarto.yml` file along with Quarto options to apply the\n    understanding of how websites work and to build then them.\n4.  Use GitHub Actions to automate generating and uploading the website,\n    then demonstrate how to make the material open by adding a license\n    to the repository.\n5.  Continue applying the concepts and functions used from the previous\n    sessions.\n\n## Websites, what they are and why researchers should create more\n\n::: callout-note\n## Reading task: \\~3 minutes\n\nWebsites are a bit of a mystery in many ways. You open a browser, go to\nGoogle, search for something, click a link, scroll through the website,\nand read text, view images, or watch videos. But what are websites\nactually?\n\nAt their simplest and most basic core, a file on your computer and a\nwebpage you click into are exactly the same. A website is literally a\nseries of folders and files on a server in another country. Let's use\nPosit (the new RStudio company name) as an example. The website\n<https://posit.co/> is like a folder called `posit.co/` on your\ncomputer. The website <https://posit.co/resources/> (notice the\n`resources/` ending) is like a `resources/` folder in the `posit.co/`\nmain folder on your computer. But you might ask, you just said a webpage\nis like a file, so where is the file name in\n<https://posit.co/resources/>? Well, browsers do something special when\nthey see an URL with no file ending: They assume some default files to\nlook for. When a URL doesn't include a file ending, the browser looks\nfor files that are named either `index` or `default`. The most common\nfile name for a webpage is `index.html`. But it can also be `index.php`,\n`index.asp`, or `default.htm`. We can test which file name a webpage is\nby typing the file name at the end of the URL. If we try\n<https://posit.co/resources/index.html>, we get a 404 error, meaning the\nfile doesn't exist. But if we try\n<https://posit.co/resources/index.php>, if works! So making a website is\nas simple as having HTML files in a folder and uploading that folder\nonto a website hosting service. The services themselves can be tricky to\nuse, but some are dead easy, like GitHub Pages is, which we will show\nlater on.\n\nSo why should researchers make websites? Because it is the easiest way\nto disseminate your work, your projects, who you are as a researcher,\nand to have more impact and outreach. Given the current tools available\nand their ease of use, there is no reason any researcher (even\nnon-technical ones) couldn't use websites as a way of publishing more of\nyour work. Especially since if you are already learning about the\nworkflow around using R, building functions, writing R Markdown (or\nQuarto), and using Git and GitHub, adding a website builder into this\nworkflow is surprisingly easy.\n:::\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nBriefly go through this and reinforce that a website isn't anything\nspecial, it's only a different type of file then they typically use or\ncreate.\n:::\n\n## What is Quarto and why use it?\n\n<!-- TODO: Move more of this over into the pre-course tasks -->\n\n::: callout-note\n## Reading task: \\~5 minutes\n\n[Quarto](https://quarto.org/) is the next-generation R Markdown document\ngenerator. In terms of writing Markdown syntax, there is no difference\nbetween R Markdown and Quarto (since they both use\n[Pandoc](http://pandoc.org/) internally). The differences become obvious\nwhen you want to make more complex outputs like websites, books, or\npresentations or if you want to use another language like Python.\n\nQuarto is \"language-agnostic\", meaning it isn't limited to only R\n(unlike R Markdown for the most part). And it is even easier to use than\nR Markdown and the documentation on Quarto's website is very high\nquality. For instance, with the use of the \"Search\" feature in the\nQuarto website (in the right-hand corner), you can search the\ndocumentation very easily. Over the next few years, R Markdown will be\nslowly phased out in favour of Quarto, for good reason. It is an massive\nupgrade in features and usability.\n\n![Cartoon showing the general workflow that Quarto uses to create\ndifferent file outputs. [Artwork by\n\\@allison_horst.](https://allisonhorst.com/allison-horst)](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/b5217f2a-f129-4bf9-90dc-c5b9783d0ea8_rw_1920.png?h=0d8c9fc177975359270821bcba83986c)\n\nLet's start the comparison with the YAML header differences between R\nMarkdown and Quarto:\n\n::: columns\n::: {.column width=\"45%\"}\n**Quarto: Word**\n\n``` yml\nformat: docx\n```\n\n**Quarto: HTML**\n\n``` yml\nformat: html\n```\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n**R Markdown: Word**\n\n``` yml\noutput: word_document\n```\n\n**R Markdown: HTML**\n\n``` yml\noutput: html_document\n```\n:::\n:::\n\nAs you can see, they aren't too different. But as you use it more\nthough, it becomes obvious how powerful Quarto is.\n\nWe can use the same keybinding shortcut as with R Markdown: with\n{{< var keybind.render >}}. You can also use the Command Palette with\n{{< var keybind.palette >}} followed by typing \"render\".\n\nOne big upgrade from R Markdown is that Quarto has a strong focus on\nscholarly writing and formatting, for instance by adding authors and\naffiliation metadata that gets added to the output document. It looks\nlike:\n\n``` yml\nauthor:\n  - name: Jane\n    orcid: 0000-0000-0000-0000\n    email: mymail@email.com\n    affiliations:\n      - name: Insitution Name\n        address: Street 10\n        city: City\n        postal-code: 0000\n```\n:::\n\n## Exercise: Add author information to the YAML in the Quarto file\n\n> Time: \\~10 minutes.\n\n<!-- TODO: Delete everything in qmd? -->\n\nIn the `doc/learning.qmd` file, add your author information to the YAML\nheader.\n\n1.  Add the `author:` metadata below the `title:` and above the\n    `format:` metadata.\n2.  Include your `name` and `affiliations` (with only the `- name:` for\n    institution).\n3.  Render the document with {{< var keybind.render >}}. See what gets\n    changed.\n4.  Replace `format: html` with `format: docx` and re-render the\n    document. Switch back to `html`.\n5.  Commit the changes to the Git history with {{< var keybind.git >}}.\n\n## Using Quarto to build a project website\n\nNow for the fun part, to use Quarto to build a website! At this stage,\nwe only need two files: An `index.qmd` file and a `_quarto.yml` file. As\nwe covered above, a browser will always look for a file called `index`\nwhen the URL is only a folder. So for our main project folder, we need\nthis file. Let's create this file with `{usethis}` to both create and\nthan open it:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nedit_file(\"index.qmd\")\n```\n:::\n\n\nWe won't add much for now, only need to add a `#` header:\n\n```         \n# Lipidomics study\n```\n\nNext, let's create the `_quarto.yml` file that will have all the\nsettings for the website.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nedit_file(\"_quarto.yml\")\n```\n:::\n\n\nThere are many \"top-level\" settings that we can include in this file.\nThe first one is the `project:` metadata, which tells Quarto details\nabout the project as a whole. Since we want to create website, the\noption to set it would be `type: website`:\n\n``` yml\nproject:\n  type: website\n```\n\nThe next bit is to tell Quarto some details about the website. Websites\nin general are structured with the content, a navigation bar (\"navbar\"),\nand possibly some links on the side (think of how websites like YouTube\nor Twitter are structured). This is the same for Quarto. Each included\n`.Rmd`, `.md`, or `.qmd` files are the content and Quarto adds the\nnavbar. But we have to include what gets added to the navbar.\n\nThe first \"top-level\" metadata is `website:` and the first second-level\nmetadata is usually the `title:` of the website (that will be shown on\nthe navbar). Next, let's set up the `navbar:` second-level header. There\nare two sub-levels to `navbar:`, `left:` and `right:`. These tell Quarto\nwhat links should be put on the right-side of the navbar or the\nleft-side. We'll start with the `left:`. Underneath, we need to give it\na list of either file names or a pair of `href:` and `text:` or `icon:`\nmetadata. To keep things simple, we'll use the `href:` and `text:` for\neach item for the `index.qmd` and the `doc/learning.qmd` files. Like a\nlist in Markdown, a list in YAML starts with a `-`, where a pair of\nmetadata belong to a single `-`. Our `website:` settings should look\nlike this now:\n\n``` yml\nwebsite:\n  title: \"Lipidomics analysis\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: Home\n      - href: doc/learning.qmd\n        text: \"Report\"\n```\n\nAfter we've set the settings for the `website:`, we need to tell Quarto\nwhat output files to create. We could do this for each individual file,\nbut adding `format: html` to each YAML header. But we'd be duplicating a\nlot of options. Instead, we can put it in the `_quarto.yml` file and set\nthe `format:` for all files in the project. There are many many options\nwe can set here, but the biggest one is what `theme:` you want. There\nare several theme templates listed on the [Quarto HTML Theming\npage](https://quarto.org/docs/output-formats/html-themes.html). We'll\nuse a simple one called `simplex`.\n\n::: {.callout-tip appearance=\"default\"}\nYou can always override the project-level settings from the\n`_quarto.yml` file by using the `format:` (or other options) in the YAML\nheader of an individual Markdown file.\n:::\n\n``` yml\nformat:\n  html:\n    theme: simplex\n```\n\nWhile we have enough for Quarto to know how to build the website, let's\nadd one more thing to the Quarto settings. For documents on an analysis,\nwe usually want to show the output of code but not the code itself. In\n`{knitr}`, there is a code chunk option `echo` that hides the code from\nthe final output document. In Quarto, you can set project-level\n`{knitr}` options with the top-level metadata `knitr:` along with the\nsecond-level metadata `opts_chunk:`. Below it we can add settings that\naffect code chunks, like `echo`. Let's hide all code from the website:\n\n``` yml\nknitr:\n  opts_chunk:\n    echo: false\n```\n\n::: {.callout-tip appearance=\"default\"}\nWhen building a website, Quarto will render *all* `.md`, `.Rmd`, and\n`.qmd` files in the project. To stop Quarto from rendering certain\nfiles, you can either prefix the file with `_` (e.g. `_learning.qmd`) or\nyou can use the `render:` setting and use `!` before the file name you\nwant to **not** render, which looks like this in the `_quarto.yml` file:\n\n``` yml\nproject:\n  type: website\n  render:\n    - \"!doc/learning.qmd\"\n```\n:::\n\nNow let's build the website. You can either use the \"Render\" button on\nthe top or use {{< var keybind.build_site >}} for \"Build\". Let's do it\nnow. The website should pop up in either the Viewer Pane or as a new\nwindow. If not, we can debug what's going on.\n\nThe next step is to commit the changes we've made, but you'll also see\nthat a new folder called `_site/` has been created. This folder contains\nall the files that form the website, like the HTML files and style\nfiles. While we could add these files to the Git history and make it so\nthat GitHub uses those to host as a website, we're going to set up\nGitHub later to build the website for us automatically. So we'll add the\n`_site/` folder to the `.gitignore` file with:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nuse_git_ignore(\"_site\")\n```\n:::\n\n\nNow we can commit the changes to the `_quarto.yml`, the `.gitignore`\nfile, and the `index.qmd` file to the Git history with\n{{< var keybind.git >}}.\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Exercise: Add collaboration setting to `_quarto.yml` file and update targets\n\n> Time: \\~5 minutes.\n\nLike we did in @sec-smoother-collaboration with the `editor_options`\nsetting we added in our R Markdown file, let's make this setting global\nto the whole project. Cut and paste that metadata from\n`doc/learning.qmd` into the bottom of `_quarto.yml`:\n\n``` yml\neditor_options:\n  markdown:\n    wrap: 72\n    canonical: true\n```\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nNext, update the `_targets.R` file by changing:\n\n-   the `name` argument to `quarto_website`, since we're building a site\n    now not just docs, and,\n-   the `path` argument to point to the main project folder `\".\"` (`.`\n    means \"the same folder `_targets.R` is in)\n\nIt should look like this now:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntar_quarto(\n  name = quarto_website,\n  path = \".\"\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Automate rendering the website\n\nThere is a way that we could create the website and save it in the\n`_site/` folder, commit it to Git, and have GitHub host the website for\nus. But than we'd be saving a lot of files that would need to be updated\nquite often, which is annoying to keep track of. Instead, we can make\nuse of GitHub Actions to build and publish our website for us, including\nrendering all the R code.\n\n::: {.callout-tip appearance=\"default\"}\nThere is a way to have GitHub completely (re-)build the website from\nscratch each time, including running any R code. However, our project\ndoesn't have much R code and we have data that we don't keep in the\nproject Git history. So we need to run the computations locally first so\nGitHub and build the website without the data. This is done through\nsomething called \"execution freezes\". In the `_quarto.yml` file, add\nthis metadata settings to the bottom:\n\n``` yml\nexecute:\n  freeze: auto\n```\n\nThen when we re-render the website with {{< var keybind.build_site >}},\nthere will be a new folder created called `_freeze/`. Inside this folder\nare instructions to Quarto on how to run the code chunks inside the\n`.qmd` file.\n:::\n\nTo get GitHub Actions to build the website we need to do two things\nfirst. Run a command to set things up and then add a new Action workflow\nfile.\n\nTo set our repository up for the Action, we need to run\n`quarto publish gh-pages` once in the **Terminal** (*not the R\nConsole*). We open the Terminal either through the menu\n`Tools -> Terminal -> New Terminal` or with the Command Palette\n({{< var keybind.palette >}}) along with typing the text \"terminal\".\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.bash .cell-code}\nquarto publish gh-pages\n```\n:::\n\n\nOr, we can make use of the R's `system()` function by typing in the R\nConsole:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsystem(\"quarto publish gh-pages\")\n```\n:::\n\n\nNext is add the Action workflow file:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nedit_file(\".github/workflows/build-website.yaml\")\n```\n:::\n\n\nThen we can copy and paste the template code from the [Quarto Example\nAction](https://github.com/quarto-dev/quarto-actions/blob/main/examples/quarto-publish-example.yml)\nfile, which is (slightly modified) below. We don't need to understand\nthis code, at least not for this course. Because it is template code,\nit's there to be copied and pasted (for the most part).\n\n``` yml\non:\n  push:\n    branches: \n      - main\n      - master\n\nname: Render and Publish\n\npermissions:\n  contents: write\n  pages: write\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n        \n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: false\n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n          \n      # From https://github.com/r-lib/actions/tree/v2-branch/setup-r\n      - name: Setup R\n        uses: r-lib/actions/setup-r@v2\n      \n      - name: Publish to GitHub Pages (and render)\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          # this secret is always available for github actions\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} \n```\n\nLet's commit this new file to the Git history with\n{{< var keybind.git >}} and push the changes up to GitHub. While we wait\nfor the GitHub Action to finish, complete the next exercise.\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Exercise: Add licensing information to repository\n\n> Time: \\~10 minutes.\n\nYou've now created and published a website! If you value sharing though,\nthere's a few extra things you need to do. Whenever you create\nsomething, legally it is copyrighted to you. If you do nothing else, no\none is able to use what you share because legally they are not allowed\nto. That's where licenses come in. A license is a legal document that\ntells others what they can and can't do with your copyrighted material.\nIf you are publishing research work or other creative works and you want\nothers to easily re-use it, you need to add a license document to your\nrepository. A commonly used and recommended license for research and\ncreative work is the Creative Commons Attribution 4.0 license, so we\nwill use that.\n\n1.  In the R Console, type out `use_ccby_license()`.\n\n2.  Add a simple license text to the bottom of each webpage by opening\n    `_quarto.yml`, going to the `website:` section, and adding this to\n    the bottom of it:\n\n    ``` yml\n      page-footer:\n        center:\n          - text: \"License: CC BY 4.0\"\n    ```\n\n3.  Check that it works by rendering the website again with\n    {{< var keybind.build_site >}}. Scroll to the bottom of the webpage\n    that pops up to check that it has been added.\n\nNext, let's add some discoverability items to the `README.md` file and\nto the GitHub repository.\n\n1.  Go to your project's GitHub page.\n\n2.  Confirm that the Actions worked by going to the \"Actions\" tab. If\n    there is a green check mark there, than continue to the next item.\n    Otherwise, put up a \"help sticky\".\n\n3.  Open up your project's GitHub page and go to `Settings -> Pages`.\n    You should see a link to your new website. Copy that link.\n\n4.  Go to the \"Code\" tab, then click the gear icon on the right side, to\n    the right of \"About\". In the box that pops up, paste the link in the\n    \"Website\" textbox.\n\n5.  In your RStudio project, open up the `README.md` file (e.g. with\n    `edit_file(\"README.md\")`). Add some text below the first `#` header,\n    pasting the link where the `LINK` text is in this template:\n\n    ```         \n    Check out the project's [website](LINK).\n    ```\n\n6.  Commit the changes to the `README.md` to the Git history with\n    {{< var keybind.git >}}.\n\n::: {.callout-tip appearance=\"default\"}\nSometimes you might make a change to files that aren't part of the\nwebsite and don't want to trigger the GitHub Action, since it would be a\nwaste of resources (computing time still costs energy). GitHub Actions\nrun every time you push up. So if you don't want the last commit in the\nGit history to trigger the Actions, you can add the text\n`[skip actions]` to the end of the commit message.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n## Using Quarto-style code options\n\n::: {.callout-note collapse=\"true\"}\n## Instructor note\n\nWalk through this section with them. They will use this information in\nthe next exercise.\n:::\n\nAnother difference with Quarto compared to R Markdown is how code chunk\noptions are set. While you can continue using `{knitr}` style code chunk\noptions, it's best to start switching to using the Quarto style. Compare\nthem below.\n\n::: columns\n::: {.column width=\"45%\"}\n**knitr-style chunk options**\n\n\n::: {.cell layout-align=\"center\"}\n\n````{.cell-code}\n```{{r, warning=TRUE, message=TRUE}}\n1:5\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> [1] 1 2 3 4 5\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"10%\"}\n:::\n\n::: {.column width=\"45%\"}\n**Quarto-style chunk options**\n\n\n::: {.cell layout-align=\"center\"}\n\n````{.cell-code}\n```{{r}}\n#| warning: true\n#| message: true\n1:5\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n#> [1] 1 2 3 4 5\n```\n:::\n:::\n\n:::\n:::\n\nWhy the change? They needed to develop an approach that worked with\nother languages as well, like Python. `{knitr}` is an R-specific\npackage, so they needed a more language agnostic way of setting chunk\noptions. A full list of the code chunk options is found in the [Cell\nReference](https://quarto.org/docs/reference/cells/cells-knitr.html)\nsection of the website.\n\n## Summary\n\n-   Use Quarto, along with their referring to their documentation, to\n    create various types of output documents, including websites.\n-   Add an `index.qmd` file as well as the `_quarto.yml` file with\n    Quarto settings to build a website.\n-   Make use of execution freezes and GitHub Actions to host your\n    website on GitHub.\n-   Add a license file (for instance, with `use_ccby_license()`) to\n    allow others to re-use your work.\n",
    "supporting": [
      "build-website_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}