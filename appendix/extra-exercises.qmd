# Extra exercises

## A general approach to doing statistical analyses

### Exercise: How would you define a linear regression with parsnip?

> Time: \~10 minutes.

Using [parsnip's "Examples"
vignette](https://parsnip.tidymodels.org/articles/Examples.html) as well
as the code we wrote for the logistic regression above as a template,
write `{parsnip}` code that would define a simple (an engine of`"lm"`)
linear regression model. Begin by making a new Markdown header and code
chunk at the bottom of the `doc/learning.qmd` file, like listed below:

````         
## Exercises
### Linear regression model definition

```{{r}}

```
````

After writing the code, style the file using {{< var keybind.styler >}}.
We will eventually delete these exercise text in the Quarto file, but
for now, commit the changes to the Git history.

```{r solution-define-linear-reg-model}
#| eval: false
#| code-fold: true
#| code-summary: "**Click for the solution**. Only click if you are struggling or are out of time."
linear_reg_specs <- linear_reg() %>%
  set_engine("lm")
```

## Building a website with Quarto

### Exercise: Look through the new website folder

> Time: \~5 minutes.

In your main project folder, there should now be a folder called
`_site/`. Look through the folder. What files are now created? Open up
the `index.html` file in your browser while in RStudio by clicking the
`index.html` file and then selecting the "Open in web browser".

<!-- TODO: Confirm the name of the website folder. -->

Recall how we described what a website is. Can you see how these files
and folders are simply HTML files that the browser shows as website? In
the browser URL, change the `index.html` ending link to
`doc/report.html`. See how it changes to the file based on how it is
structured in the folder?

### Exercise: Make figures prettier

> Time: \~25 minutes

Looking through the [Cell
Reference](https://quarto.org/docs/reference/cells/cells-knitr.html)
documentation, complete these tasks.

-   Add a `fig-cap` option to each of the figures.

-   For the distribution plot, set the code chunk option `column` to
    `page` to make it bigger.

Look through the `{ggplot2}` documentation on `theme_set()` and
`theme()` to update the look of all your figures. In the `setup` code
chunk of the `doc/learning.qmd` file, make a new theme object and use
`theme_set()` to apply that theme to all plots. Use this as a scaffold:

```{{r setup}}
# ... previous code
updated_theme <- theme(
  # ... make changes
)

# Or start with a template like theme_classic()

updated_theme <- theme_TEMPLATE() +
  theme(
    # ...
  )

theme_set(updated_theme)
```
