{
  "hash": "1d1a6e3741245e3706f1b92d93071e75",
  "result": {
    "markdown": "---\nexecute:\n  eval: false\n---\n\n\n# Connecting to GitHub {#sec-connect-github}\n\nOne of the best ways of sharing your code (or really, any scientific\noutput, like this website!) is through GitHub. Connecting your Git\nrepository to GitHub is also a great way to collaborate with others and\nto keep a backup of your work.\n\nSo, let's connect your project to GitHub! ðŸ¥³ Thankfully, `{usethis}` has\na few functions to help us out. Before you can connect your project's\nGit repository to GitHub, you need to inform GitHub (authenticate) that\nyou are the owner of your account.\n\n## Authenticating with GitHub\n\nAny time we do anything on the Internet, there is some risk to having\nour information maliciously hacked. This is no different when using\nGitHub, so if we can, we should try to be more secure with what we send\nacross the internet. In fact, most functions that relate to Git or using\nGitHub *require* using more secure features in order to work.\n`{usethis}` makes this much easier, thankfully, with several functions.\nThe `{usethis}` website has a really [well written\nguide](https://usethis.r-lib.org/articles/articles/git-credentials.html)\non setting it up. Here is a very simplified version of what they\nrecommend that is relevant for what we are doing in this course.\n\n-   Use personal access tokens (PAT, or simply called a \"token\") when\n    interacting with your GitHub remote repositories while outside of\n    the GitHub website (e.g. when using R or `{usethis}`). PAT's are\n    like temporary passwords that provide limited access to your GitHub\n    account, like being able to read or write to your GitHub\n    repositories, but not being able to delete them. They are useful\n    because you can easily delete the PAT if you feel someone got access\n    to it and prevent it from being used, unlike your own password which\n    you would have to manually change if it was stolen.\n-   Use a password manager to save the PAT for later use. Using password\n    managers is basically a requirement for having secure online\n    accounts, because they can generate random and long passwords that\n    you don't have to remember.\n-   Use packages like `{gitcreds}` to give `{usethis}` access to the PAT\n    and to interact with your GitHub repositories. You normally would\n    use `{gitcreds}` every time you restart your computer or after a\n    certain period of time.\n\nYou very likely haven't set up a PAT, but if you are uncertain, you can\nalways check with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngh_token_help()\n```\n:::\n\n\n    â€¢ GitHub host: 'https://github.com'\n    â€¢ Personal access token for 'https://github.com': <unset>\n    â€¢ To create a personal access token, call `create_github_token()`\n    â€¢ To store a token for current and future use, call `gitcreds::gitcreds_set()`\n    â„¹ Read more in the 'Managing Git(Hub) Credentials' article:\n      https://usethis.r-lib.org/articles/articles/git-credentials.html\n      \n\nThe output is saying the token is `<unset>`, which means we need to make\nGit and `{usethis}` aware of it. We do that by typing the next function\nin the Console to create the token on GitHub (if you haven't created one\nalready).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_github_token()\n```\n:::\n\n\nThis function sends us to the GitHub \"Generate new token\" webpage with\nall the necessary settings checked. Set the \"Expiry date\" to 90 days\n(this is a good security feature). Then, click the green button at the\nbottom called \"Generate token\" and you'll have a very long string\ngenerated for you that starts with `ghp_`. **Save this token in your\npassword manager**. This is the token you will use every time you open\nup RStudio and interact with GitHub through R. You do **not** need to\ncreate a new token for each R project or package you make, you only need\nto create one after your current token expires (typically every couple\nof months), if you've forgotten the token or lost it, or if you've\nchanged to a new computer. In order for R recognize the token, we need\nto use the `{gitcreds}` package as a workflow dependency.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_package(\"gitcreds\", \"suggests\")\n```\n:::\n\n\nThen, in the Console, run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngitcreds::gitcreds_set()\n```\n:::\n\n\nAnd then copy and paste your token into the prompt in the Console. This\ntoken usually gets saved for the day (it gets cached), but after\nrestarting you will need to run the action again. If it asks to replace\nan existing one, select the \"yes\" option. Doing this is a bit like using\nthe two-factor authentication (2FA) you often have to do when, for\ninstance, accessing your online bank account or other government\nwebsite. In this case, you are telling GitHub (when interacting to it\nthrough RStudio, like uploading and downloading your changes) that you\nare who you claim to digitally be.\n\n::: callout-tip\nThere is another great helper function that runs a lot of checks and\ngives some advice when it finds potential problems.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngit_sitrep()\n```\n:::\n\n\nJust to be aware, using this function outputs a *lot* of stuff, most of\nwhich you probably don't even need to know or don't even know what it\nmeans. That's ok, since it is meant as a diagnostic tool.\n:::\n\n## Linking your project to GitHub\n\nNow that we can authenticate to GitHub that you are digitally you, we\ncan connect our project's Git repository to GitHub. If you are new to\nGit and GitHub, we strongly recommend starting your first project(s) as\nprivate, in case you accidentally add files you aren't supposed to. It\nwill also help get you feeling comfortable with using Git and GitHub. In\nthe Console, run:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_github(private = TRUE)\n```\n:::\n\n\nThis will take your project and upload it to GitHub. Now, whenever you\nuse Git and save your changes to the Git history, whenever you \"Push\"\nyour changes it will be sent to your project on GitHub. The diagram\nbelow shows how it conceptually looks like:\n\n\n```{mermaid}\n%%| label: fig-local-vs-remote\n%%| fig-cap: Schematic showing a local repository connected to GitHub's remote repository.\n%%| echo: false\n%%| eval: true\n%%{init:{'theme':'forest', 'flowchart':{'nodeSpacing': 20, 'rankSpacing':30}}}%%\ngraph LR;\n    yours(Your local) -->|Push| github(GitHub)\n    github -->|Pull| yours\nlinkStyle 0,1 stroke-width:1px;\n```\n\n\nThe \"Your local\" is your own computer. Whenever you \"push\" to GitHub, it\nmeans it will upload your file changes (like synchronizing in Dropbox).\nWhenever you \"pull\" from GitHub, it takes any changes made on GitHub and\ndownloads them to your \"Local\" computer.\n\nWhy use GitHub? For one, it is one of the most effective ways of\ncollaborating on a shared project. Hundreds of companies and hundreds of\nthousands of workers use Git and services like GitHub to work together\non massive projects. The way collaboration works would conceptually look\nlike:\n\n\n```{mermaid}\n%%| label: fig-local-collab-and-remote\n%%| fig-cap: Schematic showing a local repository, GitHub's remote repository, and a collaborator's repository.\n%%| echo: false\n%%| eval: true\n%%{init:{'theme':'forest', 'flowchart':{'nodeSpacing': 20, 'rankSpacing':30}}}%%\ngraph LR;\n    yours(Your local) -->|Push| github(GitHub)\n    github -->|Pull| yours\n    others(Collaborator's<br>local) -->|Push| github\n    github -->|Pull| others\nlinkStyle 0,1,2,3 stroke-width:1px;\n```\n\n\nThis approach to collaborating makes it much easier to contribute\n*directly* (not through emails) to projects and to more easily help\nothers out with issues.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}