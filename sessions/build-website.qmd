# Publicizing your analyses with a website {#sec-build-website}

{{< include ../includes/_wip.qmd >}}

Intro

## Learning objectives

The overall objective for this session is to:

1.  Explain what a website is, what minimum files are needed, and how to
    use Quarto as a framework for creating them and including them as
    part of a pipeline.

More specific objectives are to:

1.  Describe how websites are essentially folders and files, where some
    files need to be named a specific way (like the `index.html` file).
2.  Explain how Quarto executes R code in a document and creates
    different file formats from it, like Word or HTML. Use Quarto's YAML
    header options, like `format: docx` or `format: html`, to create
    different file outputs.
3.  Use the `_quarto.yml` file along with Quarto options to apply the
    understanding of how websites work and to build then them.
4.  Use GitHub Actions to automate generating and uploading the website,
    then demonstrate how to make the material open by adding a license
    to the repository.
5.  Continue applying the concepts and functions used from the previous
    sessions.

## Exercise: What is a website?

> Time: \~5 minutes.

With your neighbour, discuss and come to an agreement about what
*exactly is* a website? Could you explain it to an 80 year old? Or a 10
year old? Or to the class? Don't look ahead!
:stuck_out_tongue_winking_eye:

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Ask if anyone wants to share, though they don't need to if they don't
feel comfortable with it.
:::

## Websites, what they are and why researchers should create more

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Talk through this point, showing the websites and reinforcing that a
website isn't anything special, it's just a different type of file then
they typically use or create.
:::

Websites are a bit of a mystery in many ways. You open a browser, go to
Google, search for something, click a link, scroll through the website,
and read text, view images, or watch videos. But what are websites
actually?

At their simplest and most basic core, a file on your computer and a
webpage you click into are exactly the same. A website is literally a
series of folders and files on a server in another country. Let's use
Posit (the new RStudio company name) as an example. The website
<https://posit.co/> is like a folder called `posit.co/` on your
computer. The website <https://posit.co/resources/> (notice the
`resources/` ending) is like a `resources/` folder in the `posit.co/`
main folder on your computer. But you might ask, you just said a webpage
is like a file, so where is the file name in
<https://posit.co/resources/>? Well, browsers do something special when
they see an URL with no file ending: They assume some default files to
look for. When a URL doesn't include a file ending, the browser looks
for files that are named either `index` or `default`. The most common
file name for a webpage is `index.html`. But it can also be `index.php`,
`index.asp`, or `default.htm`. We can test which file name a webpage is
by typing the file name at the end of the URL. If we try
<https://posit.co/resources/index.html>, we get a 404 error, meaning the
file doesn't exist. But if we try
<https://posit.co/resources/index.php>, if works! So making a website is
as simple as having HTML files in a folder and uploading that folder
onto a website hosting service. The services themselves can be tricky to
use, but some are dead easy, like GitHub Pages is, which we will show
later on.

So why should researchers make websites? Because it is the easiest way
to disseminate your work, your projects, who you are as a researcher,
and to have more impact and outreach. Given the current tools available
and their ease of use, there is no reason any researcher (even
non-technical ones) couldn't use websites as a way of publishing more of
your work. Especially since if you are already learning about the
workflow around using R, building functions, writing R Markdown (or
Quarto), and using Git and GitHub, adding a website builder into this
workflow is surprisingly easy.

## What is Quarto and why use it?

[Quarto](https://quarto.org/) is the next-generation R Markdown document
generator. You might not even realize it, but if you are using a
relatively recent version of RStudio, you are already using Quarto to
knit your R Markdown documents. In terms of writing Markdown syntax,
there is no difference between R Markdown and Quarto (since they both
use [Pandoc](http://pandoc.org/) internally). The differences become
obvious when you want to make more complex outputs like websites, books,
or presentations or if you want to use another language like Python.
Quarto is "language-agnostic", meaning it isn't limited to only R
(unlike R Markdown for the most part). And it is even easier to use than
R Markdown and the documentation on Quarto's website is very high
quality. Over the next few years, R Markdown will be slowly phased out
in favour of Quarto, for good reason. It is an massive upgrade in
features and usability.

![Cartoon showing the general workflow that Quarto uses to create
different file outputs. [Artwork by
\@allison_horst.](https://allisonhorst.com/allison-horst)](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/b5217f2a-f129-4bf9-90dc-c5b9783d0ea8_rw_1920.png?h=0d8c9fc177975359270821bcba83986c)

Let's start the comparison with the YAML header differences between R
Markdown and Quarto:

::: columns
::: {.column width="50%"}
### Quarto: Word documents

``` yml
format: docx
```

### Quarto: HTML documents

``` yml
format: html
```
:::

::: {.column width="50%"}
### R Markdown: Word documents

``` yml
output: word_document
```

### R Markdown: HTML documents

``` yml
output: html_document
```
:::
:::

As you can see, they aren't too different. But as you use it more
though, it becomes obvious how powerful Quarto is. Let's open the
`doc/report.Rmd` file and delete all the existing YAML metadata and
convert to the formal Quarto format. We'll create a HTML output document
for now.

``` yml
title: "Analysis of lipidomics"
format: html
```

We can use the same keybinding shortcut as with R Markdown:
`Ctrl-Shift-K`. You can also use the Command Palette (`Ctrl-Shift-P`)
followed by typing "render".

One big upgrade from R Markdown is that Quarto has a strong focus on
scholarly writing and formatting, for instance by adding authors and
affiliation metadata that gets added to the output document. It looks
like:

``` yml
author:
  - name: Jane
    orcid: 0000-0000-0000-0000
    email: mymail@email.com
    affiliations:
      - name: Insitution Name
        address: Street 10
        city: City
        postal-code: 0000
```

## Exercise: Convert R Markdown YAML to Quarto style

> Time: \~10 minutes.

In the `doc/report.Rmd` file, add your author information to the YAML
header.

1.  Add the `author:` metadata below the `title:` and above the
    `format:` metadata.
2.  Include your `name` and `affiliations` (with only the `- name:` for
    institution).
3.  Render the document with `Ctrl-Shift-K`. See what gets changed.
4.  Replace `format: html` with `format: docx` and re-render the
    document. Switch back to `html`.
5.  Commit the changes to the Git history.

## Using Quarto to build a project website

Now for the fun part, to use Quarto to build a website! At this stage,
we only need two files: An `index.qmd` file and a `_quarto.yml` file. As
we covered above, a browser will always look for a file called `index`
when the URL is only a folder. So for our main project folder, we need
this file. Let's create this file with `{usethis}` to both create and
than open it:

```{r fs-create-index-qmd}
#| purl: true
#| eval: false
edit_file("index.qmd")
```

We won't add much for now, only need to add a `#` header:

    # Lipidomics study

Next, let's create the `_quarto.yml` file that will have all the
settings for the website.

```{r fs-create-index-qmd}
#| purl: true
#| eval: false
edit_file("_quarto.yml")
```

There are many "top-level" settings that we can include in this file.
The first one is the `project:` metadata, which tells Quarto details
about the project as a whole. Since we want to create website, the
option to set it would be `type: website`:

``` yml
project:
  type: website
```

The next bit is to tell Quarto some details about the website. Websites
in general are structured with the content, a navigation bar ("navbar"),
and possibly some links on the side (think of how websites like YouTube
or Twitter are structured). This is the same for Quarto. Each included
`.Rmd`, `.md`, or `.qmd` files are the content and Quarto adds the
navbar. But we have to include what gets added to the navbar.

The first "top-level" metadata is `website:` and the first second-level
metadata is usually the `title:` of the website (that will be shown on
the navbar). Next, let's set up the `navbar:` second-level header. There
are two sub-levels to `navbar:`, `left:` and `right:`. These tell Quarto
what links should be put on the right-side of the navbar or the
left-side. We'll start with the `left:`. Underneath, we need to give it
a list of either file names or a pair of `href:` and `text:` or `icon:`
metadata. To keep things simple, we'll use the `href:` and `text:` for
each item for the `index.qmd` and the `doc/report.Rmd` files. Like a
list in Markdown, a list in YAML starts with a `-`, where a pair of
metadata belong to a single `-`. Our `website:` settings should look
like this now:

``` yml
website:
  title: "Lipidomics analysis"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - href: doc/report.Rmd
        text: "Report"
```

After we've set the settings for the `website:`, we need to tell Quarto
what output files to create. We could do this for each individual file,
but adding `format: html` to each YAML header. But we'd be duplicating a
lot of options. Instead, we can put it in the `_quarto.yml` file and set
the `format:` for all files in the project. There are many many options
we can set here, but the biggest one is what `theme:` you want. There
are several theme templates listed on the [Quarto HTML Theming
page](https://quarto.org/docs/output-formats/html-themes.html). We'll
use a simple one called `simplex`.

::: callout-info
You can always override the project-level settings from the
`_quarto.yml` file by using the `format:` (or other options) in the YAML
header of an individual Markdown file.
:::

``` yml
format:
  html:
    theme: litera
```

We have enough for Quarto to know how to build the website, but let's
add one more thing. For documents on an analysis, we usually want to
show the output of code but not the code itself. In `{knitr}`, there is
a code chunk option `echo` that hides the code from the final output
document. In Quarto, you can set project-level `{knitr}` options with
the top-level metadata `knitr:` along with the second-level metadata
`opts_chunk:`. Below it we can add settings that affect code chunks,
like `echo`. Let's hide all code from the website:

``` yml
knitr:
  opts_chunk:
    echo: false
```

Great! Now we can build the website! You can either use the "Render"
button on the top of use `Ctrl-Shift-B` for "Build". Let's do it now.
The website should pop up in either the Viewer Pane or as a new window.
If not, we can debug what's going on.

Before moving on to the exercise, let's add one setting that we did
earlier that can help with collaboration. That's the `editor_options` we
added in our R Markdown file in the first session. Let's cut and paste
that metadata from `doc/lesson.Rmd` into the bottom of `_quarto.yml`:

``` yml
editor_options:
  markdown:
    wrap: 72
    canonical: true
```

## Exercise: Add website as a pipeline target

`tar_quarto()`

## Automate rendering the website

-   Combine with freeze?

``` yml
execute:
  freeze: auto
```

-   Connect to GitHub and make website

    -   Actions?

## Exercise: Add license to repository

-   Add link to GitHub description section.

-   Update README with link.

-   License? Probably good idea.

    -   use_ccby_license()

``` yml
website:
  ...
  page-footer:
    center:
      - text: "License: CC BY 4.0"
```

## Exercise: Make figures prettier

-   Make ggplot2 figures nicer, as an exercise? Add the theme to each
    plot or with theme_set()
-   Add figure captions, fig heights, widths
    -   using quarto style code
-   Make table of model estimates and variation?

## Make we

## Resources

-   Bibliography

## Summary
