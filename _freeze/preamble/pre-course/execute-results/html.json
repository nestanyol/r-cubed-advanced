{
  "hash": "0f4e327c9960cfc1f66d3254fda61ba2",
  "result": {
    "markdown": "---\nexecute:\n  eval: false\n---\n\n\n# Pre-course tasks\n\nIn order to participate in this course, you must complete the pre-course\ntasks in this section as well as **completing the\n[survey](https://docs.google.com/forms/d/e/1FAIpQLSfzTLrLFyQHj79YGaCQDN5fUZ_9et1qdmtDGiq6gNPGzFSCyQ/viewform?usp=sf_link)**\nat the end. These tasks are designed to make it easier for everyone to\nstart the course with everything ready to go. For some of the tasks, you\nmight not understand why you need to do them, but you will likely\nunderstand why once the course begins.\n\nDepending on your skills and knowledge, these tasks could take between\n**3-5 hrs to finish**, so we suggest planning a full day to complete\nthem. Depending on your institution and how they handle installing\nsoftware on work computers, you also might have to contact IT *very\nearly* to make sure everything is properly installed and set up.\n\n## Summary of tasks\n\nHere's a quick overview of the tasks you need to do. Specific details\nabout them are found as you work through this section.\n\n1.  Install a version of R, RStudio, Quarto, and Git that is as updated\n    as possible. For some people, depending on their institution, this\n    task can take the **longest amount of time** because you have to\n    contact your IT to install these packages.\n2.  Install the necessary R packages.\n3.  Read about Git from the introduction course and configure Git on\n    your computer. If you haven't used Git before, this task could take\n    a while because of the reading.\n4.  Run a check to see if everything works. You'll later need to paste\n    this output into the survey.\n5.  Create an R Project, along with the folder and file setup.\n6.  Create an R Markdown file.\n7.  Write (well, mostly copy and paste) R code to download the data and\n    save it to your computer. This task will probably take up maybe\n    30-60 minutes depending on your interest of exploring the data.\n8.  Run a check to see that everything is as expected. You'll later need\n    to paste this output into the survey.\n9.  Read the [Welcome](/index.qmd) page.\n10. Read the syllabus in @sec-syllabus.\n11. Read the Code of Conduct in @sec-conduct.\n12. **Complete the pre-course\n    [survey](https://docs.google.com/forms/d/e/1FAIpQLSfzTLrLFyQHj79YGaCQDN5fUZ_9et1qdmtDGiq6gNPGzFSCyQ/viewform?usp=sf_link)**.\n    This survey is pretty quick, maybe \\~10 minutes.\n\nCheck each section for exact details on completing these tasks.\n\n## Learning objective\n\nIn general, these pre-course tasks are meant to help prepare you for the\ncourse and make sure everything is setup properly so the first session\nruns smoothly. However, some of these tasks are meant for learning as\nwell as for general setup, so we have defined the following learning\nobjectives for this page:\n\n1.  Learn about and then apply some basic reproducible workflows and\n    setups for the initial processing of raw data. For those who have\n    already participated in the [intermediate R\n    course](https://r-cubed-intermediate.rostools.org/), the objective\n    is to review what you previously learned.\n\n## Reading the course website\n\nThere are a few \"syntax\" type formatting of the text in this website to\nbe aware of:\n\n-   Folder names always end with a `/`, for example `data/` means the\n    data folder.\n-   R variables are always shown as is. For instance, for the code\n    `x <- 10`, `x` is a variable because it was assigned with 10.\n-   Functions always end with `()`, for instance `mean()` or\n    `read_csv()`.\n-   Sometimes functions have their package name appended with `::` to\n    indicate to run the code from the specific package, since we likely\n    haven't loaded the package with `library()`. For instance, to\n    install packages from GitHub using the `{remotes}` package we use\n    `remotes::install_github()`.\n\n## Installing the latest programs\n\nGiven this is an advanced course, you should probably already have R and\nRStudio installed. However, you may not have the latest versions\ninstalled.\n\n1.  Have the latest version of\n    [R](https://cloud.r-project.org/index.html) installed (or at least\n    any version above `4.1.2`). Check by running `R.version.string` in\n    the console.\n2.  Have the latest version of\n    [RStudio](https://www.rstudio.com/products/rstudio/download/#download)\n    installed (or at least any version above `v2021.09.0+351`). Check by\n    going to the menu \"Help -\\> About RStudio\".\n\nThere are a few other things to install:\n\n1.  [Git](https://git-scm.com/downloads). We'll be using Git (continuing\n    to build off of the previous courses), so it needs to be installed.\n2.  For some Windows users, you may need to install\n    [Rtools](https://cran.r-project.org/bin/windows/Rtools/Rtools35.exe)\n    in order for some R packages to be successfully installed (which\n    you'll do shortly). For some computers, installing Rtools can take\n    some time. *You need this in order for some packages to work.*\n3.  [Quarto](https://quarto.org/docs/get-started/). Quarto is a next\n    generation version of R Markdown. If you've used R Markdown before,\n    there isn't much difference, except you might notice that Quarto is\n    easier to use and more powerful. We will use Quarto to create the\n    reproducible documents and website at the end.\n\nAll these programs are required for the course, even Git. Git, which is\na software program to formally manage file versions, is used because of\nits popularity and the amount of documentation available for it. Check\nout the online book [Happy Git with R](https://happygitwithr.com/),\nespecially the \"Why Git\" section, to understand why we are using Git.\nWindows users tend to have more trouble with installing Git than macOS\nor Linux users. See the section on [Installing Git for\nWindows](https://happygitwithr.com/install-git.html#install-git-windows)\nfor help.\n\n> *A note to those who have or use work laptops with restrictive\n> administrative privileges*: You may encounter problems installing\n> software due to administrative reasons (e.g. you don't have permission\n> to install things). For issues with updating to the latest version of\n> R or RStudio, as long as you at least have the minimum version listed\n> above, it should be fine. If you have versions of R and RStudio older\n> than that, it is necessary for you to request that IT update your\n> software if you can't yourself. Unfortunately, given that Git and\n> Quarto are not a commonly used software for some organizations, you\n> may not have it installed and you *will* need to ask IT to install it.\n> We *require* it for the course, so please make sure to give IT enough\n> time to be able to install it for you.\n\nOnce R, RStudio, Quarto, and Git have been installed, open RStudio. *If\nat any point during these pre-course tasks you have any troubles*, try\nas best as you can to complete the task and then let us know about the\nissues in the pre-course survey (at the end of this section). If you\ncontinue having problems, indicate on the survey that you need help and\nwe can try to book a quick video call to fix the problem. Otherwise, if\nyou can, come to the course earlier (about 20-30 min) to get help.\n\n## Installing the R packages\n\nWe will be using specific R packages for the course, so you will need to\ninstall them. All the packages needed for course are included in the\ncourse helper package r3, so you only need to install it by running\nthese commands in the R Console:\n\n1.  Install the `{remotes}` package:\n\n    ``` r\n    install.packages(\"remotes\")\n    ```\n\n2.  Install the r3 helper package for this course and then install the\n    packages for the advanced course. This step may take a lot longer\n    than you anticipate and you may likely encounter a lot of issues,\n    especially if you come from more restrictive IT environments and/or\n    your work computer is very old or slow. This is something that is\n    completely out of our hands and is entirely an organizational issue\n    that we'd love to help with but can't. Keep persisting though!\n    :muscle:\n\n    ``` r\n    remotes::install_gitlab(\"rostools/r3\")\n    r3::install_packages_advanced()\n    ```\n\n*Note*: When you see a command like `something::something()`, for\nexample with `remotes::install_gitlab()`, you would \"read\" this as:\n\n> R, can you please use the `install_gitlab()` function from the\n> `{remotes}` package.\n\nThe normal way of doing this would be to load the package with\n`library(remotes)` and then running the command (`install_gitlab()`).\nBut by using the `::`, we tell R to directly use a function from a\npackage, without needing to load the package and all of its other\nfunctions too. We use this method because we only want to use the\n`install_gitlab()` command from the `{remotes}` package and not have to\nload all the other functions as well. In this course we will be using\n`::` often.\n\n## Setting up Git\n\nSince Git has already been covered in the previous courses, we won't\ncover *learning it* during this course. However, since version control\nis a fundamental component of any modern data analysis workflow and\n*should be used*, we **will be using it throughout the course**. If you\nhave used or currently use Git and GitHub, you can skip these two tasks.\nIf you *have not* used it, please do these tasks:\n\n1.  Follow the [pre-course tasks for Git and\n    GitHub](https://r-cubed.rostools.org/pre-course.html#setting-up-git-and-github)\n    from the introduction course. Specifically, type in the RStudio\n    Console:\n\n    ``` r\n    # There will be a pop-up to type in your name (first and \n    # last), as well as your email\n    r3::setup_git_config()\n    ```\n\n2.  **Please read** through the [Version Control\n    lesson](https://r-cubed.rostools.org/version-control.html) of the\n    introduction course. *You don't need to do any of the exercises or\n    activities*, but you are welcome to do them if it will help you\n    learn or understand it better. For most of the course, we will be\n    using Git as shown in the [Using Git in\n    RStudio](https://r-cubed.rostools.org/version-control.html#using-git-in-rstudio)\n    section. During the course, we will connect our projects to GitHub,\n    which is described in the [Synchronizing with\n    GitHub](https://r-cubed.rostools.org/version-control.html#synchronizing-with-github)\n    section.\n\nRegardless of whether you've done the steps above or not, *everyone*\nneeds to run:\n\n``` r\nr3::check_setup()\n```\n\nThe output you'll get for success will look something like this:\n\n    Checking R version:\n    ✔ Your R is at the latest version of 4.2.0!\n    Checking RStudio version:\n    ✔ Your RStudio is at the latest version of 2022.2.2.485!\n    Checking Git config settings:\n    ✔ Your Git configuration is all setup!\n    Git now knows that:\n    - Your name is 'Luke W. Johnston'\n    - Your email is 'lwjohnst\\@gmail.com'\n\n**Eventually you will need to copy and paste the output into one of the\nsurvey questions**. *Note* that while GitHub is a natural connection to\nusing Git, given the limited time available, we will only be going over\naspects of GitHub that relate to storing your project Git repository and\nsetting up the website. If you want to learn more about using GitHub,\ncheck out the\n[session](https://r-cubed.rostools.org/version-control.html) on it in\nthe introduction course.\n\n## Create an R Project\n\nOne of the basic steps to reproducibility and modern workflows in data\nanalysis is to keep everything contained in a single location. In\nRStudio, this is done with R Projects. Please read all of [this\nsection](https://r-cubed.rostools.org/r-project-management.html#what-is-a-project-and-why-use-it)\nfrom the introduction course to learn about R Projects and how they help\nkeep things self-contained. *You don't need to do any of the exercises\nor activities*.\n\nThere are several ways to organise a project folder. We'll be using the\nstructure from the package\n[prodigenr](https://rostools.github.io/prodigenr/). The project setup\ncan be done by either:\n\n1.  Using RStudio's New Project menu item: \"File -\\> New Project -\\> New\n    Directory\", scroll down to \"Scientific Analysis Project using\n    prodigenr\" and name the project \"AdvancedR3\" in the Directory Name,\n    saving it to the \"Desktop\" with Browse.\n2.  Or, running the command\n    `prodigenr::setup_project(\"~/Desktop/AdvancedR3\")` (or other\n    location like `Documents`) in the R Console and manually switching\n    to it using: `File -> Open Project` and navigating to the project\n    location.\n\n\n::: {.cell}\n\n:::\n\n\nWhen the RStudio Project opens up again, run these three commands in the\nR Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprodigenr::setup_with_git()\nusethis::use_blank_slate(\"project\")\nusethis::use_r(\"functions\", open = FALSE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nHere we use the `{usethis}` package to help set things up. `{usethis}`\nis an extremely useful package for managing R Projects and we highly\nrecommend checking it out more to see how you can use it in your own\nwork.\n\n## R Markdown and Quarto\n\nWe teach and use R Markdown/Quarto because it is one of the very first\nsteps to being reproducible and because it is a very powerful tool to\ndoing data analysis. You may have heard of or used R Markdown since\nwe've used it in both the introduction and intermediate courses.\nHowever, you might not have heard of or used Quarto.\n\nQuarto is a next generation version of R Markdown and chances are, if\nyou use a fairly recent version of RStudio, you are already using it\nwithout realizing it. That's because Quarto uses the same Markdown\nsyntax as R Markdown. The only difference is that with Quarto, you can\ncreate more types of output documents (like books, websites, slides),\nyou have more options for customization, and it's easier to do and learn\nthan R Markdown. So, for this course, we will eventually use Quarto to\nmake a website of the analysis that we will do over the course.\n\nPlease do these two tasks:\n\n1.  Please read over the [R Markdown\n    section](https://r-cubed.rostools.org/reproducible-documents.html)\n    of the introduction course. If you use R Markdown already, you can\n    skip this step.\n\n2.  In the R Console while inside the `AdvancedR3` project, run the\n    function to create a new file called `lesson.Rmd` in the `doc/`\n    folder.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    r3::create_rmarkdown_doc()\n    ```\n    :::\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::draft(\n  file = fs::path(\"doc\", \"lesson.Rmd\"),\n  template = \"basic-rmd\",\n  package = \"r3\",\n  edit = FALSE\n)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Download the course data\n\nWe're going to use a real world dataset to demonstrate the concepts in\nthis course. We're going to use an openly licensed dataset with\nmetabolomics data [@Herance2022].\n\nSimilar to the intermediate course, we will follow the principle of\nbuilding a reproducible pipeline, from raw data to the report on the\nanalysis. We'll also follow the principle of keeping the raw data *raw*\nand use code to tidy it up. The ultimate goal is to have a record of how\nwe *exactly* went from raw data to results in the paper. Unlike the\nintermediate course where you had to write through each step of the\nscript and what you needed to do, in this course you only need to copy\nand paste the code that will download and minimally process the dataset\ninto an initially workable state. If you want to learn more about how to\ntake a raw data set and process it into a format that is more suitable\nfor analysis, check out the [intermediate\ncourse](https://r-cubed-intermediate.rostools.org/).\n\nInside the `data-raw/` folder, we are going to write R code that\ndownloads a dataset, processes it into a more tidy format, and save it\ninto the `data/` folder. This is the start of our analysis pipeline.\nFirst step, we need to create the script to do these steps. While in\nyour `AdvancedR3` R Project, go to the Console pane in RStudio and type\nout:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_data_raw(\"nmr-omics\")\n```\n:::\n\n\nWhat this function does is create a new folder called `data-raw/` and\ncreates an R script called `nmr-omics.R` in that folder. This is where\nwe will store the raw, original metabolomics data that we'll get from\nthe [website](https://zenodo.org/record/6597902). If you go to the\nwebsite with the dataset, you'll notice (when you scroll down) that\nthere are three files: A README file, a metabolomics `.xlsx` file, and a\nlipidomics `.xlsx` file. For now, we only want the README file and\nlipidomics dataset.\n\nThe R script should have opened up for you, otherwise, go into the\n`data-raw/` folder and open up the new `nmr-omics.R` script. The first\nthing to do is delete all the code in the script. Than, copy and paste\nthe code below into the script.\n\n\n::: {.cell file='/home/luke/Documents/teaching/r-cubed-advanced/data-raw/nmr-omics.R'}\n\n```{.r .cell-code}\n# Load necessary packages -------------------------------------------------\n\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(here)\n\n# Download dataset --------------------------------------------------------\n\n# From DOI: 10.5281/zenodo.6597902\n# Direct URL: https://zenodo.org/record/6597902\n\n# Get both README and the Lipidomics dataset.\nnmr_omics_dir <- here(\"data-raw/nmr-omics\")\nfs::dir_create(nmr_omics_dir)\n\ndownload.file(\"https://zenodo.org/record/6597902/files/README.txt\",\n  destfile = here(nmr_omics_dir, \"README.txt\")\n)\n\ndownload.file(\n  \"https://zenodo.org/record/6597902/files/NMR_Integration_Data_Lipidomics.xlsx\",\n  destfile = here(nmr_omics_dir, \"lipidomics.xlsx\"), mode = \"wb\"\n)\n\n# Wrangle dataset into tidy long format -----------------------------------\n\nlipidomics_full <- read_xlsx(\n  here(nmr_omics_dir, \"lipidomics.xlsx\"),\n  col_names = paste0(\"V\", 1:40)\n)\n\n# There are actually two sets of data in this dataset that we need to split:\n# - Lipidomic data\n# - Subject level data\n\n# Keep only lipidomic values\nlipidomics_only <- lipidomics_full %>%\n  # Want to remove columns 2, 3, and 4 since they are \"limits\"\n  # (we don't need them for this course)\n  select(-2:-4) %>%\n  # Remove the subject data rows\n  slice(-1:-4) %>%\n  mutate(across(-V1, as.numeric)) %>%\n  # Make it so the metabolite values are all in one column,\n  # which will make it easier to join with the subject data later.\n  pivot_longer(-V1) %>%\n  rename(metabolite = V1)\n\n# Keep only subject data\nsubject_only <- lipidomics_full %>%\n  # Remove the first metabolic name and limit columns,\n  # don't need for this\n  select(-1:-3) %>%\n  # Keep only the subject data raw\n  slice(1:4) %>%\n  pivot_longer(cols = -V4) %>%\n  pivot_wider(names_from = V4, values_from = value) %>%\n  # There is a weird \"​\" before some of the numbers, so we have\n  # extract just the number first before converting to numeric.\n  mutate(Age = as.numeric(stringr::str_extract(Age, \"\\\\d+\"))) %>%\n  rename_with(snakecase::to_snake_case)\n\nlipidomics <- full_join(\n  subject_only,\n  lipidomics_only\n) %>%\n  # Don't need anymore\n  select(-name)\n\n# Save to `data/` ---------------------------------------------------------\n\nusethis::use_data(lipidomics, overwrite = TRUE)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nSince this is an advanced course, you can run the lines one at a line\nand see what they do on your own (or `source()` them all at once). The\ncomments provided give guidance on what the code is doing and why. In\nthe end, though, the only important thing is to run all the code and get\nthe `lipidomics` dataset to be saved as `data/lipidomics.rda`. The\ncreated files should look like this:\n\n\n::: {.cell}\n\n:::\n\n\n``` text\nAdvancedR3\n├── data\n│   └── lipidomics.rda\n└── data-raw\n    ├── nmr-omics\n    │   ├── README.txt\n    │   └── lipidomics.xlsx\n    └── nmr-omics.R\n```\n\nAnd the created dataset in `data/lipidomics.rda` should look like (using\n`load()`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(here::here(\"data/lipidomics.rda\"))\nlipidomics\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.sourceCode}\n# A tibble: 504 × 6\n   code   gender   age class metabolite                value\n   <chr>  <chr>  <dbl> <chr> <chr>                     <dbl>\n 1 ERI109 M         25 CT    TMS (interntal standard) 208.  \n 2 ERI109 M         25 CT    Cholesterol               19.8 \n 3 ERI109 M         25 CT    Lipid CH3- 1              44.1 \n 4 ERI109 M         25 CT    Lipid CH3- 2             147.  \n 5 ERI109 M         25 CT    Cholesterol               27.2 \n 6 ERI109 M         25 CT    Lipid -CH2-              587.  \n 7 ERI109 M         25 CT    FA -CH2CH2COO-            31.6 \n 8 ERI109 M         25 CT    PUFA                      29.0 \n 9 ERI109 M         25 CT    Phosphatidylethanolamine   6.78\n10 ERI109 M         25 CT    Phosphatidycholine        41.7 \n# … with 494 more rows\n```\n:::\n:::\n\n\nTake a look through the downloaded `data-raw/nmr-omics/README.txt` and\n`data-raw/nmr-omics/lipidomics.xlsx` files, as well as the created\n`data/lipidomics.rda` to begin better understanding the dataset.\n\nWe are using Git to track changes made to files in our project. The\noriginal metabolomics dataset is stored on Zenodo, so we don't actually\nneed to keep the raw data files in our Git history. So let's tell Git to\nignore the files created in the `data-raw/nmr-omics/` folder. In the\nConsole, type out the code below. You only need to do this once.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_git_ignore(\"data-raw/nmr-omics/\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n``` r\nr3:::check_project_setup_advanced()\n```\n\n``` text\nShow folders and files of project:\n• Please copy and paste this output into the survey question:\n/home/luke/Desktop/AdvancedR3\n├── AdvancedR3.Rproj\n├── DESCRIPTION\n├── R\n│   ├── README.md\n│   └── functions.R\n├── README.md\n├── TODO.md\n├── data\n│   ├── README.md\n│   └── lipidomics.rda\n├── data-raw\n│   ├── README.md\n│   ├── nmr-omics\n│   │   ├── README.txt\n│   │   └── lipidomics.xlsx\n│   └── nmr-omics.R\n└── doc\n    ├── README.md\n    ├── lesson.Rmd\n    └── report.Rmd\n```\n\nThe output should look something a bit like the above text. If it\ndoesn't, start over by deleting everything in the `data-raw/` folder\n*except* for the `data-raw/nmr-omics.R` script and re-running the script\nagain. If your output looks a bit like the above, than copy and paste\nthe output into the survey question at the end.\n\n## Course introduction\n\nMost of the course description is found in the syllabus (@sec-syllabus).\nIf you haven't read it, **please read it now**. Read over what the\ncourse will cover, what we expect you to learn at the end of it, and\nwhat our basic assumptions are about who you are and what you know. The\nfinal pre-course task is to complete a survey that asks if you've read\nit and if it matches you.\n\nOne goal of the course is to teach about open science, and true to our\nmission, we practice what we preach. The course material is publicly\naccessible (all on this website) and [openly\nlicensed](/index.qmd#licensing) so you can use and re-use it for free!\nThe material and table of contents on the side is listed in the order\nthat we will cover in the course.\n\nWe have a Code of Conduct (@sec-conduct). If you haven't read it, **read\nit now**. The survey at the end will ask about Conduct. We want to make\nsure this course is a supportive and safe environment for learning, so\nthis Code of Conduct is important.\n\nYou're almost done. Please fill out the [**pre-course\nsurvey**](https://docs.google.com/forms/d/e/1FAIpQLSfzTLrLFyQHj79YGaCQDN5fUZ_9et1qdmtDGiq6gNPGzFSCyQ/viewform?usp=sf_link)\nto finish this assignment.\n\nSee you at the course!\n",
    "supporting": [
      "pre-course_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}