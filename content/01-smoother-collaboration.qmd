# Smoother project-based collaboration {#smoother-collaboration}

{{< include ../includes/_wip.qmd >}}

Many of you probably work largely and mostly consistently on your own,
but as your move through your career (in academia or industry), you will
need to and maybe also want to *directly
collaborate*[^01-smoother-collaboration-1] a lot more with others.
Different types of collaboration (e.g. meetings, brainstorming,
real-time co-writing) form the basis for almost all research-based work
and probably most non-research-based work.

[^01-smoother-collaboration-1]: Collaborate here meaning directly
    contributing to a shared project, rather than discussed or planning
    based collaborations (and definitely not emailing-files-around
    collaboration).

More direct collaboration on a project quickly becomes unmanageable when
using traditional academic "workflows" (emailing around). That's when
you need to start using tools designed for collaboration, like Git. But
Git is just the starting point. There are many many other things to
consider for workflows and processes to effectively collaborate with
others. This session is about making use of more automated ways of
structuring data analysis projects to ease collaboration.

## Learning objectives

The overall objective for this session is to:

1.  Identify potential actions to streamline collaboration on a data
    analysis project and create projects that apply many of these
    actions using R.

More specific objectives are to:

1.  Explain what a "project-oriented" workflow is, what a project-level
    R dependency management is, what a "project environment" is, and why
    these concepts are important to consider in collaborative and
    reproducible analyses.
2.  Describe the difference between "workflow dependencies" and "build
    dependencies".
3.  Apply functions in the `{renv}` and `{usethis}` R packages to
    implement these dependency management concepts.
4.  Explain the role that following a style guide has on building a
    common approach to reading (and writing) R code, and thus improve
    project-level collaboration.
5.  Use `{styler}`, `{lintr}`, and RStudio's canonical markdown mode to
    programmatically check and apply style guides to your project files.

## Project-level R dependency management

> Note: This first session is more conceptual and is heavier on the
> reading and explanation, but is important for the next sessions.

One of the first things to consider when working collaboratively on a
data analysis project (and probably other types of projects too) is what
software to use for your project. This starts out at the highest level:
Are you using R or some other software for the analysis? Since this is
an R course, so we're assuming the software will be R! 😜

The next consideration is which packages do you need that will
ultimately be the ones your project depends on to get the results that
you find. When working collaboratively with others, and yourself several
months in the future, you need some way of knowing how to easily and
quickly install or update these package dependencies.

Part of this approach requires that you follow a ["project-oriented"
workflow](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/)
when working on, well, your project. In order to know how to track your
project's package dependencies, you need to first know, what is a
"project" and how do we work around it? Since the introduction course's
first session on the [Management of R
Projects](https://r-cubed.rostools.org/r-project-management.html), we've
consistently taught and used this workflow-style. In fact, it is
embedded into the use of the R Projects via the `.Rproj` files and in
the use of the `{here}` package. So we already are following this
approach from the start, which will make it easier to track package
dependencies of our project.

Let's start with the `AdvancedR3` project that uses the `lipidomics`. We
have code in the `data-raw/nmr-omics.R` file that uses some packages.
Let's assume that your project will be more complex than this and that
you will eventually need some collaborators to contribute who are
experts in, for instance metabolomics data processing and in statistical
analysis of high-dimensional data. You know you will end up needing to
use other packages. You also know that you all need some way of tracking
which packages are used so that when others join and contribute to the
project, they can as seamlessly as possible install or update the
packages your data analysis project needs. There are a few ways of
"tracking" package dependencies.

::: callout-info
## Reading task: \~5 minutes

1.  The simplest, but most primitive way is to always make sure to use
    `library()` at the top of each R script for each package that the R
    script uses.

    -   Advantage:

        -   This is the easiest to conceptually understand and to use.

    -   Disadvantages:

        -   It doesn't track project-level dependencies very well, since
            multiple scripts probably use similar packages across them.
            Which means you can't easily and quickly install or update
            all the packages your project uses, since you will probably
            have to go through each R script manually and install each
            package manually. You might have seen some scripts with code
            that looks like this at the top:

            ``` r
            if (!require("packagename")) {
              install.packages("packagename")
            }
            ```

            What this code does is check if a package exists, if not,
            than it installs it. But! This is not an optimal methods to
            track packages because `require()` won't load the package if
            it doesn't find it. Which means you would have to re-run the
            script probably a few times. Plus, sometimes you may need to
            restart the R session after installing a package in order
            for R to detect it probably.

        -   It doesn't track the *versions* of the packages your project
            depends on, so if a package gets updated and it breaks
            something, you might not be able to figure out how to
            quickly fix that issue, especially for those deadline
            crunches.

2.  The most common form, at least based on R packages and projects
    found on GitHub, is making use of the `DESCRIPTION` file and
    `usethis::use_package()` to track which package is used for a
    project or not. We covered this style of dependency in the
    [intermediate
    course](https://r-cubed-intermediate.rostools.org/dry-functions.html#continuing-the-workflow).
    We will also use this approach during this course, but expand a lot
    more on it.

    -   Advantages:

        -   Relatively easy to conceptually understand, since you can
            directly view the packages your project needs by opening the
            `DESCRIPTION` file and looking at the contents.

        -   Because it is widely used, there are many processes already
            built around making use of tracking dependencies this way.
            For instance, you need to track package dependencies when
            creating R packages.

        -   Installing packages is as easy as opening the project and
            running `remotes::install_deps()` in the Console, which will
            install all the packages listed in the `DESCRIPTION` file.

        -   Adding packages that you need is as easy as writing
            `usethis::use_package("packagename")` in the Console.

    -   Disadvantages:

        -   Like the previous method, it doesn't easily keep track of
            the versions of the packages you are using.

        -   Your project might still rely on a package that is installed
            on *your* computer and that influences your project, but
            that might not be obvious as a dependency or that you forgot
            to include.
:::

Before continuing to the exercise, we need to make sure to add and
comment all the files from the project into the Git history. Open the
Git interface by either typing `Ctrl-Shift-M` or by going to the Git
pane and clicking the "Commit" button.

## Exercise: Add packages from the data processing script

> Time: \~10 minutes.

Since the `DESCRIPTION` file will be used later on for the more formal
dependency management, let's get it updated with the packages we are
using in the `data-raw/nmr-omics.R` script. Open that file and complete
these tasks:

1.  Look for package dependencies that are declared with `library()` and
    `::`.
2.  Use `?usethis::use_package` to review how to use this function.
3.  In the Console, run `usethis::use_package()` for each package you
    find in `data-raw/nmr-omics.R` (from 1. above).
4.  Once done, open the Git interface (`Ctrl-Shift-M` or go to the Git
    Pane and click the "Commit" button). What has been changed? Commit
    those changes to the Git history.
    -   You'll see a newly created file called `.Rbuildignore`. We don't
        really need this for this course, so let's do
        `usethis::use_git_ignore(".Rbuildignore")`.

```{r solution-add-processing-packages}
#| eval: false
#| code-fold: true
#| code-summary: "**Click for the solution**. Only click if you are really struggling or are out of time for the exercise."
#| purl: true
usethis::use_package("readxl")
usethis::use_package("dplyr")
usethis::use_package("tidyr")
usethis::use_package("here")
usethis::use_package("fs")
usethis::use_package("usethis")
```

```{r purl-only-commit-desc}
#| eval: false
#| echo: false
#| purl: true
usethis::use_git_ignore(".Rbuildignore")
gert::git_add(c("DESCRIPTION", ".gitignore"))
gert::git_commit("Add packages as dependencies to project.")
```

## Formal dependency management

While the approach of managing package dependencies through the
`DESCRIPTION` file is quite powerful, it has the major disadvantage of
not keeping track of the *version* of each of your packages. So instead
we are going to use a package dedicated to handling project
dependencies, called `{renv}`.

`{renv}` is a package that manages package dependencies in a project by,
in simple terms, creating a project-specific R "library". You might
think of `library()` when you hear R library, and you aren't completely
wrong. When you call, for instance, `library("usethis")`, R looks for
the package `{usethis}` in your computer's "library" of R packages. This
library can be found by running this function:

```{r libpaths}
.libPaths()
```

Those file paths are where all R packages are installed to. If there is
more than one path, R checks the first before continuing to the next. So
than what `{renv}` does is create another file path for R packages to be
installed instead within the project. This isn't completely what it
does, since there are a lot of very technical details to what `{renv}`
does internally, but this is the basic concept.

In the end, this makes your project relatively self-contained in its
package dependencies.

-   Advantages:

    -   Installing all packages necessary for your project is as easy as
        running `renv::restore()`. `{renv}` even gives you helpful tips
        and instructions when things go wrong or if something is
        missing.

    -   *Every* package, including the packages that your packages
        depend on, have their version tracked. So if a package gets
        updated on CRAN, it doesn't affect you *until you choose*, when
        you use `renv::update()`. If a package update breaks your code
        and you have a deadline, you can easily go back to the older
        versions of the packages.

    -   Because your project is now self-contained with its own R
        library, it becomes very obvious (through errors) when you might
        be missing some other dependency because your code wouldn't run
        until you install or fix that package dependency.

    -   From a reproducibility point of view, as long as your project is
        tracked by `{renv}`, it's easier to independently have your data
        analysis be reproduced and verified.

-   Disadvantages:

    -   It takes a fair amount of learning to conceptually understand
        what is going on.

    -   When there are issues that come up, it can be difficult to
        figure them out.

    -   Because *all* packages, including those packages that your
        packages depend on, are installed within your project,
        installation times can sometimes be a bit long.

::: aside
It's sometimes very annoying to debug these "virtual environments". But
thankfully you can turn it off with `renv::deactivate()`! It still is
worth it to start considering and accounting for how your dependencies
might influence your project results and collaboration.
:::

Let's start using `{renv}` in our `AdvancedR3` project. In the Console,
type out:

```{r renv-init}
#| eval: false
#| purl: true
renv::init()
```

```{r purl-only-add-renv-init}
#| eval: false
#| echo: false
#| purl: true
gert::git_add(c("renv.lock", "renv", ".Rprofile"))
gert::git_commit("Add renv machinery.")
```

The function `renv::init()` initializes the project to begin being
managed by `{renv}`. It will ask a series of questions and then will
install all the packages detected in the project. It adds several files
to the project:

```{r show-created-files}
#| echo: false
fs::dir_tree(regexp = "\\.Rprofile|renv", all = TRUE, recurse = 1)
```

-   `.Rprofile`: This is the file that `{renv}` uses to build up its
    machinery. With an `.Rprofile` within the project folder, we can
    create a "project environment". By having this project environment
    that is (mostly) self-contained, it allows us to be a bit closer to
    having a fully reproducible analysis and it makes it easier to
    collaborate together, since we all than share the same project
    setup.

-   `renv.lock`: This contains all the information about the packages
    your project depends on, including where it was installed from (CRAN
    or GitHub for example), what the version number is, and more. This
    is like a supercharged version of the `DESCRIPTION` file.

-   `renv/`: This folder contains several other files that make up the
    machinery of `{renv}`. For instance, there is the `library/` folder
    that contains all the R packages necessary for the project. Then
    there's the `activate.R` script and `settings.dcf` file that both
    work to management the dependencies, like installing, updating, and
    removing.

**Before we continue, let's commit the new files to the Git history**.

The general workflow for using `{renv}` while working on your project is
described in more detail on the [Introduction to
renv](https://rstudio.github.io/renv/articles/renv.html#workflow)
webpage. However, unlike the general workflow, we also want to continue
using the `DESCRIPTION` file. That's because a lot of tools and
workflows exist that make use of it, so we want to remain compatible
with them.

As we work on the project and realize we need to use a specific package,
we would normally use `install.packages()` and then add `library()` to
the script or R Markdown file. Later on, we'd eventually run
`renv::snapshot()` to update the `renv.lock` file with the new packages
we've installed. `renv::snapshot()` as well as `renv::init()` usually
rely on "implicit" dependencies, meaning `{renv}` will search throughout
the project for any packages used and add them to the `renv.lock` file.

However, in science, we want to be more explicit rather than implicit.
The way `{renv}` explicitly adds to the `renv.lock` file is by only
scanning the `DESCRIPTION` file. In order for `{renv}` to always do
this, we need to set an option for it. This option needs to be added to
the project's `.Rprofile` file.

We can quickly open this with:

```{r open-rprofile-first-time}
#| eval: false
usethis::edit_r_profile("project")
```

Next, at the top of the file, add this code:

```{r snapshot-settings}
#| eval: false
options(renv.settings.snapshot.type = "explicit",
        renv.config.auto.snapshot = TRUE)
```

```{r purl-only-snapshot-settings}
#| echo: false
#| eval: false
#| purl: true
readLines(here::here(".Rprofile"))|> 
  append('options(renv.settings.snapshot.type = "explicit", renv.config.auto.snapshot = TRUE)') |>
  writeLines(here::here(".Rprofile"))
gert::git_add(".Rprofile")
gert::git_commit("Add renv snapshot settings to profile.")
```

These two options make it so that whenever you add a package with
`usethis::use_package()` or `install.packages()`, `{renv}` will always
run `renv::snapshot()` and the snapshot explicitly only look at the
`DESCRIPTION` file. Let's restart the R session so that the `.Rprofile`
changes get activated.

Now our `{renv}` workflow will largely be automated for us, as long as
we do `usethis::use_package()`. If we ever ever return to a project or
collaborate on a project that uses `{renv}`, we can install all the
necessary packages with:

```{r renv-restore}
#| eval: false
renv::restore()
```

And if we need to update packages, we use:

```{r renv-update}
#| eval: false
renv::update()
```

*Sometimes*, working with `{renv}` can get annoying and you just need to
finish working on a task. If that's the case, you can always do
`renv::deactivate()` to stop using `{renv}` and `renv::activate()` to
reactivate it.

**Let's commit the changes made to the Git history**.

::: callout-info
## Reading task: \~5 minutes

**Before continuing to the next exercise, please read this**.

It's surprising how many issues can come up, from a reproducibility
perspective, when it comes to managing package dependencies. You think
something works well on your computer, but when you create a "virtual
environment" like you do when using `{renv}`, you realize it might not
work as well on other computers.

When this happens, there are several functions you can use to help debug
the situation.

`renv::diagnostics()`

:   List a *lot* of diagnostic information to look over. Sometimes its
    too much, but can help figure out what's going on.

`renv::clean()`

:   Installing packages can sometimes lead to issues in the files of the
    installed packages themselves or even left over temporary files.
    This function tries to clean up these issues for you. It can also
    clean up any unused packages

`renv::repair()`

:   Because of the way `{renv}` works, the connection to where an
    installed package is actually found can get broken. So this function
    tries to fix that and reinstall these broken packages.

`renv::rebuild()`

:   The last resort, use this to reinstall everything from scratch.
:::

## Exercise: Browse the newly created renv folders and files

> Time: \~10 minutes.

After running adding `{renv}` to the project, take a look through the
newly created `renv/` folder and see what was added. Where are the
packages now installed?

```{r ex-show-created-files}
#| echo: false
fs::dir_tree(path = "renv", all = TRUE, recurse = 1)
```

To better understand how `{renv}` creates this self-contained project,
run this line of code:

```{r ex-lib-path-renv-active}
#| eval: false
.libPaths()
```

Notice where the file paths are. Then, run this code in the Console:

```{r ex-renv-deactivate}
#| eval: false
renv::deactivate()
```

Open up the Git interface and see what was modified in the `.Rprofile`
file. What was changed? Now switch back to the Console and run these
lines of code:

```{r ex-lib-path-renv-reactive}
#| eval: false
.libPaths()
renv::activate()
```

Notice how the file path location of the R library is different when
`{renv}` is active or not?

## Two types of dependencies

When you work on a research project that involves data analysis, you
likely use packages in two different ways:

1.  Packages that directly contribute to data wrangling, analysis,
    plotting, and making the manuscript. These types of packages are
    generally called "build" or "deploy" dependencies. A package like
    `{dplyr}` or `{tidyr}` would be build dependencies, since you use
    them for processing data.
2.  Packages that assist you in doing your work but aren't directly used
    for data analysis. These types of packages would be called
    "workflow" or "development" dependencies. `{renv}` would be
    considered a workflow dependency.

A good way to determine if a package is a *build dependency* for your
project is by seeing if you write and use functions from the package
within an R script that does something to the data or analysis. If you
*only* ever use functions from the package in the Console, than it is
likely a *workflow dependency*.

The way you add these packages is different depending on the type it is.
For build dependencies, we use the function we've already used before:
`usethis::use_package("packagename")`. For workflow dependencies, it's
the same function, but with a small difference. BUT! Before we cover it,
let's add a setting to our `.Rprofile` to make our life a bit easier. We
will be using `{usethis}` functions many times throughout the course, so
a simple quality-of-life fix is to make it so we don't always have to do
`usethis::`. Thankfully, there is a function that helps us set this up.
First, open the the project `.Rprofile`. The `usethis::use_usethis()`
function opens your **user** `.Rprofile`, so we will have to close it
after running the function.

```{r add-usethis-rprofile}
#| eval: false
usethis::edit_r_profile("project")
usethis::use_usethis()
```

```{r purl-only-usethis-rprofile}
#| echo: false
#| eval: false
#| purl: true
readLines(here::here(".Rprofile")) |>
  append("if (interactive()) {suppressMessages(require(usethis))}") |>
  writeLines(here::here(".Rprofile"))
gert::git_add(".Rprofile")
gert::git_commit("Add usethis settings to profile.")
```

Let's restart R (`Ctrl-Shift-P` then type "restart r") before using
`use_package()` to add `{renv}` as a workflow dependency.

```{r suggests-dep}
#| eval: false
#| purl: true
usethis::use_package("renv", "suggests")
```

```{r purl-only-update-desc-with-renv}
#| eval: false
#| echo: false
#| purl: true
# Restart R session first.
gert::git_add("DESCRIPTION")
gert::git_commit("Add renv as a suggests dependency.")
```

Open the Git interface and see that under `Suggests:` in the
`DESCRIPTION` file is `renv`. Let's commit these changes, as well as the
changes to `.Rprofile`.

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

For the information block below, mention it to the learners but you
don't need to go over it.
:::

::: callout-info
When you come back to a project after a few months or if you start
collaborating on a project, usually `renv::restore()` will be enough to
install all types of dependencies. Sometimes though, workflow
dependencies might not get installed. As long as they are tracked in the
`DESCRIPTION` file though, you can force installation of them with:

```{r install-deps}
#| eval: false
renv::install()
```
:::

## "Linting" your code

When you're working on your own and not needing to worry about anyone
seeing your code, there's a natural temptation to write your code like
you might write notes to yourself... scribbled and scrawled down
quickly. Even when you are working with others or try to write more
readable code, it still is very easy for
"lint"[^01-smoother-collaboration-2] to accumulate.

[^01-smoother-collaboration-2]: You know, the fluff you find in your
    pockets 😝

That's when "linters" (a type of "static code analysis" tool) become
very useful. A linter will scan your code for common mistakes or syntax
problems and list them out for you to fix. They don't directly fix them
for you, though we will show how to do that later in this session.
Linters are great when you are collaborating on a project with
collaborators who are not as experienced in writing code or who only
occasionally contribute so don't know the workflow culture of your
project. In this way, you might want to have automatic linting checks
(or styling) that are independent of you having to run them yourself.

The main package for doing that is the `{lintr}` package. We'll get a
chance to try out using `{renv}` since we need to install it to use it
in our project.

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Before continuing, ask the learners which type of dependency they think
`{lintr}` is or should be.
:::

```{r add-lintr-as-dep}
#| eval: false
#| purl: true
use_package("lintr", "suggests")
```

```{r purl-only-update-desc-with-lintr}
#| eval: false
#| echo: false
#| purl: true
gert::git_add("DESCRIPTION")
gert::git_commit("Add lintr as a suggests dependency.")
```

Right now we don't have much code to "lint", but as we work through the
course, we will make use of `{lintr}` before committing to Git. So, how
do we use `{lintr}`? It's actually pretty easy, since there are only a
few functions that do the linting, even though there are dozens of
customizations you can make to `{lintr}`. The basic is to lint a single
file, don't run this though:

```{r lint-one-file}
#| eval: false
lintr::lint("R/functions.R")
```

A more encompassing function checks all files in the project (also,
don't run it yet, we'll do that when we have more code in the project):

```{r lint-project-dir}
#| eval: false
lintr::lint_dir()
```

This might be useful if you want to go over everything to check things.
But, if you are working on a single file and want to do some linting of
that, the better solution is to use the Command Palette (`Ctrl-Shift-P`)
and type "lint". The first option is to lint the file you are working
on. Let's open up the `data-raw/nmr-omics.R` script and try it out.
There should be at least one note that says

``` markdown
Lines should not be more than 80 characters.
```

Keep in mind, that not all notes need to be changed. A linter is meant
to be used as a guideline, not as a rule. It helps you to follow best
practices and have some consistency between collaborators, but not to
stress about making sure all notes are addressed.

Since we will eventually connect our project Git repository to GitHub to
display a website, we can actually make use of a really powerful service
called [GitHub
Actions](https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions)
to also run `{lintr}` there for us. But before we can do that, we need
to connect to GitHub. So before doing the next exercise, let's all
**commit the changes to the Git history**.

## Exercise: Connect your project to GitHub

> Time: \~25 minutes.

Let's complete these tasks to connect to GitHub.

1.  If you haven't yet, please create a
    [GitHub](https://github.com/join) account.
2.  Read through and complete the tasks in @sec-connect-github.
3.  Check your GitHub to make sure the project repository has been
    uploaded to it.

## Adding lintr to your GitHub

Now that your `AdvancedR3` project is connected and up on GitHub, we can
make use of the GitHub Actions. The RStudio team has a
[repository](https://github.com/r-lib/actions/tree/v2/examples#example-workflows)
that lists all R "Actions" that you can use to help streamline checks on
your project. Specifically, we want to add the one for `{lintr}`, which
we can add with:

```{r lintr-action}
#| eval: false
#| purl: true
use_github_action("lint-project")
```

```{r purl-only-add-lint-action}
#| eval: false
#| echo: false
#| purl: true
gert::git_add(".github")
gert::git_commit("Add lintr GitHub Action.")
```

This creates a file in `.github/workflows/lint-project.yaml`. In order
for GitHub to start using it, we need to **commit it to the Git history
and than push it to GitHub**.

Once you've done that, switch to your project on GitHub and click the
"Actions" tab at the top. Then click the "lint-project" link on the
sidebar. This lists the checks that `{lintr}` has done on your project
in an independent environment.

## Automatically adhere to a style guide

An advantage of `{lintr}` is that it does not make the changes it
detects for you, but the disadvantage of `{lintr}`... is that it does
not make the changes for you. Often checks that require manual action
are the best way of finding and fixing things. But sometimes, especially
with very common syntax formatting mistakes, like not using spacing
properly, it is so much easier to have the computer fix it for you.
Thankfully there is the `{styler}` package!

Since we will use it for the project as a workflow dependency, let's add
it to the `DESCRIPTION` file.

```{r add-styler-dep}
#| eval: false
#| purl: true
use_package("styler", "suggests")
```

```{r purl-only-update-desc-with-styler}
#| eval: false
#| echo: false
#| purl: true
gert::git_add("DESCRIPTION")
gert::git_commit("Add styler as a suggests dependency.")
```

Like `{lintr}`, there are only a few functions in `{styler}` that we
need to use. The first is to style a single file, so let's try it in the
Console:

```{r style-file}
styler::style_file("data-raw/nmr-omics.R")
```

Since we already have the file all nice and tidy, it doesn't do
anything. But, this function is a bit much to type. We could also do it
on all files in the project with:

```{r style-dir}
#| eval: false
styler::style_dir()
```

::: callout-info
You will probably be asked to install something, click "Yes".
:::

But, like the linting we did above, we only need to style all the files
occasionally. Usually we would need to only style the file we are
actually working. We can do that through the Command Palette
(`Ctrl-Shift-P`) and typing "style file", which should show the "Style
active file" option. You'll try it out in the next exercise.

::: {.callout-note appearance="minimal" collapse="true"}
## Instructor note

Mention the callout block below, but don't go into it at all.
:::

::: callout-info
You might be used to using 4 spaces for tabs instead of 2. The tidyverse
style uses 2, so the default option in `{styler}`

```{r styler-options-4-spaces}
options(
  styler.addins_style_transformer = "styler::tidyverse_style(indent_by = 4)"
)
```
:::

## Exercise: Copy and paste code that is very wrong.

> Time: \~15 minutes.

1.  Open your `doc/lesson.Rmd` file, create a new code chunk
    (`Ctrl-Shift-I` or `Ctrl-Shift-P` followed by typing "chunk") at the
    end of the file. Copy and paste the below code:

    ``` r
    library(dplyr)
    load ( here::here( "data/lipidomics.rda") 
    )
    lipidomics%>%select(gender , age)%>%filter(age>=25)
    ```

2.  Open the Git interface and commit the changes to the Git history.
    Then push the changes to GitHub. Go to the Actions tab and see what
    happens. It might take a few minutes to finish.

3.  Go back to `doc/lesson.Rmd` file in RStudio and run `lintr::lint()`
    with the Command Palette (`Ctrl-Shift-P` then type "lint file").
    What happens? Don't do anything just yet, simply see what things
    were identified as potential issues.

4.  Run `styler::style_file()` using the Command Palette (`Ctrl-Shift-P`
    then type "style file") while inside the `doc/lesson.Rmd` file. What
    happens? Open the Git interface to see the changes made. Commit the
    changes and push to GitHub. Go into the Actions tab to see what is
    different now.

5.  Re-run the `lintr::lint()` with the Command Palette. What's changed
    since you did it last?

## Styling Markdown files

For multi-person collaborative projects, having some type of code
styling and checker can really help with standardizing how the code
looks like, which ultimately will make it easier to read each others
code contributions.

But what about for Markdown files? While there isn't a package or
function (yet) that styles the Markdown files, RStudio does have an
option in their Tools to format Markdown into a "canonical form". The
reason for this option is because they added a "visual editor mode" to
writing R Markdown files (which is great if you are more comfortable
with apps like Word). Let's test out this option. First, let's make sure
everything has been committed to the Git history.

::: callout-warning
Use this option *only if* you have your project under Git version
control, since it will directly modify and overwrite the contents of the
entire file.
:::

There are two ways of doing this:

1.  Going into
    [`Tools -> Project Options -> R Markdown`](https://rstudio.github.io/visual-markdown-editing/options.html#project-options)
    and changing the options "Automatic text wrapping" to "column" (with
    the default 72 width value) and "Write canonical visual mode
    markdown" to "true".
2.  Or setting [YAML
    options](/https://rstudio.github.io/visual-markdown-editing/markdown.html#writer-options)
    in either the project-level `_quarto.yml` file (we will cover this
    in @sec-build-website) or at the file-level in the YAML header.

For right now, we will do the file-level YAML settings. Open the
`doc/lesson.Rmd` file and go to the top of the file. Right below the
last `---`, create a new line above it and paste this code in:

``` yaml
editor_options:
  markdown:
    wrap: 72
    canonical: true
```

```{r purl-only-editor-yaml-metadata}
#| eval: false
#| echo: false
#| purl: true
editor_options <-
  "editor_options:
  markdown:
    wrap: 72
    canonical: true"
readLines("doc/lesson.Rmd") |>
  append(editor_options, after = 1) |>
  writeLines("doc/lesson.Rmd")
gert::git_add("doc/lesson.Rmd")
gert::git_commit("Add editor options to Rmd file.")
```

Now, when you save your file, RStudio should automatically reformat the
Markdown into a standardized format. If you want to switch to using the
Visual Mode, use `Ctrl-Shift-F4` or the "Visual" button at the top of
the Source Pane beside the bolding and italicizing buttons.

The instructors won't be using the Visual Mode during the course,
however you are welcome to. We will be using the "canonical" markdown
mode though.

Let's test it out. While in the `doc/lesson.Rmd` file, go to the bottom
of the file and type out:

``` markdown
##This is poorly formatted
- Definitely should have an empty space above this list.
- This isn't a list, why not?
```

Save the file. What happens? Lists in Markdown must have an empty space
above them to work properly. With this canonical mode on, we can get
feedback right away that it isn't right. We fix it by adding that empty
space.

``` markdown
## This is poorly formatted

- Definitely should have an empty space above this list.
- This isn't a list, why not?
```

Since this mode is on automatically, as we work through the sessions,
we'll get lots of experience using it.

## Exercise: Update the README file, while using canonical markdown mode

> Time: \~10 minutes.

Open up the `README.md` file and copy and paste these YAML metadata to
the top:

``` markdown
---
editor_options:
  markdown:
    wrap: 72
    canonical: true
---
```

Then, start completing the `TODO` items. Save often and watch as the
Markdown gets reformatted. After you are done, commit the changes you
made to the Git history.

```{r purl-only-editor-options-to-readme}
#| eval: false
#| echo: false
#| purl: true
editor_yaml <- paste("---", editor_options, "---", sep = "\n")
readLines("README.md") |>
  append(editor_options, after = 1) |>
  writeLines("README.md")
gert::git_add("README.md")
gert::git_commit("Add editor options to README file.")
```

## Summary

-   Track your project package dependencies with `{renv}` and combine it
    with `options()` to automatically make snapshots so you can use the
    `use_package()` function.
-   Install the necessary dependencies with `renv::restore()` or
    `renv::install()`.
-   Follow a style guide by using `{lintr}` and `{styler}`. Combine with
    the Command Palette (`Ctrl-Shift-P`) to quickly run their functions
    on code you are actively working on.
-   Use RStudio's canonical markdown mode to reformat Markdown into a
    standard format.
